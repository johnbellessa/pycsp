#summary The various process types available

= Introduction =

PyCSP provides a variety of different process types for different tasks. Table 1 shows the performance of channel communication using the [http://code.google.com/p/pycsp/source/browse/#svn/trunk/extras/examples/ commstime] benchmark for each process type on a Intel i7-2760QM CPU @ 2.40GHz running Ubuntu 12.10.

Table 1. Commstime benchmarks
|| *pycsp.greenlets : @process* || ~ 0.007ms ||
|| *pycsp.parallel : @process* || ~ 0.250ms ||
|| *pycsp.parallel : @multiprocess* || ~ 0.415ms ||

== pycsp.greenlets : @process ==

The process type in pycsp.greenlets is similar to a co-routine and requires only a small overhead. It does not utilize a stack per thread, but instead handles local thread data globally in the interpreter. The greenlets is comparable to tasklets in Stackless Python, but has the benefit that they can operate in the standard CPython interpreter.

The implementation of @process in pycsp.greenlets, does not allow any communication between greenlets from different OS threads or OS processes, thus the performance is limited by the systems single-thread performance.

Up to 100.000 pycsp.greenlets processes has successfully been used in a single PyCSP network.

The pycsp.greenlets module translates the other process decorators, such as @multiprocess, to the standard pycsp.greenlets @process.


== pycsp.parallel / @process ==

== pycsp.parallel / @multiprocess ==



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages