#summary A tutorial on the network-enabled part of PyCSP (incomplete)
#labels Tutorial
#sidebar TutorialList

<wiki:toc max_depth="2" />

= Introduction =

The pycsp.parallel module has one any-2-any Channel type, which by default, allows other processes to connect to it. When a new channel is created, it is automatically hosted in the current Python interpreter. To connect to a hosted channel the location must be known, as there is no name server available for channels.

Every Python interpreter importing PyCSP.parallel will listen on only one port and that port handles all the communication to channels and processes started in this Python interpreter.

The default host is '0.0.0.0' and the default port is just any available port. To specify a host or port, the enviroment variables PYCSP_HOST or PYCSP_PORT may be used.

{{{
#This interpreter listens on port 8888 on localhost.
PYCSP_HOST=localhost PYCSP_PORT=8888 python test.py
}}}

{{{
#To connect to a channel 'A' on localhost, port 8888
A = pycsp.Channel('A', connect=('localhost, 8888))
}}}

= Connection Handling =

As all CSP communications are using sockets, it may happen that sockets are disconnected unexpectedly. Such situations can be handled through catching the exceptions below.

|| SocketException || ... ||
|| SocketClosedException || ... ||
|| SocketConnectException || ... ||
|| SocketBindException || ... ||


Whenever a connection is lost, the connection is recreated and retried. If after N tries, the connection still fails, then...

= Channel(name, buffer, connect) =

The buffer parameter is only valid for the hosted Channel, since the buffer is located at the Channel host. 

not documented yet

== Latency hiding with a buffered channel ==

{{{
#Host A
import pycsp.parallel as pycsp
line42 = pycsp.Channel("line42", buffer=1000)
print("Address: %s" % (str(line42.address)))
input = line42.reader()
try:
  while True:
    data= input()
    # Perform work on data
except pycsp.ChannelRetireException:
  # Close hosted channel, as the channel has been retired
  pycsp.shutdown()
}}}


{{{
#Host B1,B2 .. BN
import pycsp.parallel as pycsp
line42 = pycsp.Channel("line42", connect=<address at Host A>)
output = line42.writer()
for i in xrange(10):
  output(i) # i could be large numpy arrays

pycsp.retire(output)

pycsp.shutdown()
}}}
== NAT traversal ==

not documented yet

== Limitations ==

  * All channel names have been restricted to a length of 16 chars.