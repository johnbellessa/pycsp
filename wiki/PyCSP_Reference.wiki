#summary Documentation for all components in PyCSP

= Overview =

<wiki:toc max_depth="3" />


== Creating Processes ==
=== @process ===

    @process decorator for creating process functions

{{{
    >>> @process
    ... def P():
    ...     pass

    >>> isinstance(P(), Process)
    True
}}}

== Starting Processes ==
=== Parallel ===
 Parallel(P1, [P2, .. ,PN])

{{{
    >>> @process
    ... def P1(cout, id):
    ...     for i in range(10):
    ...         cout(id)

    >>> @process
    ... def P2(cin):
    ...     for i in range(10):
    ...         cin()

    >>> C = [Channel() for i in range(10)]
    >>> Cin = map(IN, C)
    >>> Cout = map(OUT, C)

    >>> Parallel([P1(Cout[i], i) for i in range(10)],[P2(Cin[i]) for i in range(10)])

}}}
=== Sequence ===
 Sequence(P1, [P2, .. ,PN])
    The Sequence construct returns when all given processes exit.

{{{
    >>> @process
    ... def P1(cout):
    ...     Sequence([Process(cout,i) for i in range(10)])

    >>> C = Channel()
    >>> Spawn(P1(OUT(C)))

    >>> L = []
    >>> cin = IN(C)
    >>> for i in range(10):
    ...    L.append(cin())

    >>> L
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
}}}

=== Spawn ===
 Spawn(P1, [P2, .. ,PN])

{{{
    >>> @process
    ... def P1(cout, id):
    ...     for i in range(10):
    ...         cout(id)

    >>> C = Channel()
    >>> Spawn([P1(OUT(C), i) for i in range(10)])

    >>> L = []
    >>> cin = IN(C)
    >>> for i in range(100):
    ...    L.append(cin())

    >>> len(L)
    100
}}}

== Termination and Exceptions ==
=== poison ===
 Poison channel

{{{
    >>> @process
    ... def P1(cin, done):
    ...     try:
    ...         while True:
    ...             cin()
    ...     except ChannelPoisonException:
    ...         done(42)

    >>> C1, C2 = Channel(), Channel()
    >>> Spawn(P1(IN(C1), OUT(C2)))
    >>> cout = OUT(C1)
    >>> cout('Test')

    >>> poison(cout)

    >>> cin = IN(C2)
    >>> cin()
    42
}}}

=== ChannelPoisonException ===
=== retire ===
 Retire reader or writer, to do auto-poisoning
    When all readers or writer of a channel have retired. The channel is retired.

{{{
    >>> C = Channel()
    >>> cout1, cout2 = OUT(C), OUT(C)
    >>> retire(cout1)

    >>> Spawn(Process(cout2, 'ok'))

    >>> try:
    ...     cout1('fail')
    ... except ChannelRetireException:
    ...     True
    True
}}}

{{{
    >>> cin = IN(C)
    >>> retire(cin)

}}}
=== ChannelRetireException ===
== Channels and Channel ends ==
=== Channel ===
 Channel class. Blocking communication


{{{
    >>> @process
    ... def P1(cout):
    ...     while True:
    ...         cout('Hello World')

    >>> C = Channel()
    >>> Spawn(P1(OUT(C)))

    >>> cin = IN(C)
    >>> cin()
    'Hello World'
}}}

{{{
    >>> retire(cin)

}}}
